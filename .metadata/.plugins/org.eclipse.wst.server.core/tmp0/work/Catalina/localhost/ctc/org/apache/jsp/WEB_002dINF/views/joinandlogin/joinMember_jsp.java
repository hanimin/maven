/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.64
 * Generated at: 2023-04-18 07:33:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.joinandlogin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class joinMember_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/C:/maven-kimminseon/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/cornertocorner/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/tiles-jsp-2.2.2.jar", Long.valueOf(1675145507184L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1675145505448L));
    _jspx_dependants.put("jar:file:/C:/maven-kimminseon/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/cornertocorner/WEB-INF/lib/tiles-jsp-2.2.2.jar!/META-INF/tld/tiles-jsp.tld", Long.valueOf(1276606224000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.release();
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=utf-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      if (_jspx_meth_c_005fset_005f0(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"utf-8\">\r\n");
      out.write("<title>개인 회원가입</title>\r\n");
      out.write("<style>\r\n");
      out.write("input[type=reset] {\r\n");
      out.write("   border: 1px solid #00aff0;\r\n");
      out.write("   background-color: #00aff0;\r\n");
      out.write("   color: #ffffff;\r\n");
      out.write("   padding: 1em 3em 1em 3em;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<!-- css 스타일시트 추가 -->\r\n");
      out.write("<link href=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/css/joinForm.css\" rel=\"stylesheet\" type=\"text/css\">\r\n");
      out.write("\r\n");
      out.write("<script src=\"http://dmaps.daum.net/map_js_init/postcode.v2.js\"></script>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.6.4.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//우편번호\r\n");
      out.write("function execDaumPostcode() {\r\n");
      out.write("     new daum.Postcode({\r\n");
      out.write("       oncomplete: function(data) {\r\n");
      out.write("         // 팝업에서 검색결과 항목을 클릭했을때 실행할 코드를 작성하는 부분.\r\n");
      out.write("\r\n");
      out.write("         // 도로명 주소의 노출 규칙에 따라 주소를 조합한다.\r\n");
      out.write("         // 내려오는 변수가 값이 없는 경우엔 공백('')값을 가지므로, 이를 참고하여 분기 한다.\r\n");
      out.write("         var fullRoadAddr = data.roadAddress; // 도로명 주소 변수\r\n");
      out.write("         var extraRoadAddr = ''; // 도로명 조합형 주소 변수\r\n");
      out.write("\r\n");
      out.write("         // 법정동명이 있을 경우 추가한다. (법정리는 제외)\r\n");
      out.write("         // 법정동의 경우 마지막 문자가 \"동/로/가\"로 끝난다.\r\n");
      out.write("         if(data.bname !== '' && /[동|로|가]$/g.test(data.bname)){\r\n");
      out.write("           extraRoadAddr += data.bname;\r\n");
      out.write("         }\r\n");
      out.write("         // 건물명이 있고, 공동주택일 경우 추가한다.\r\n");
      out.write("         if(data.buildingName !== '' && data.apartment === 'Y'){\r\n");
      out.write("           extraRoadAddr += (extraRoadAddr !== '' ? ', ' + data.buildingName : data.buildingName);\r\n");
      out.write("         }\r\n");
      out.write("         // 도로명, 지번 조합형 주소가 있을 경우, 괄호까지 추가한 최종 문자열을 만든다.\r\n");
      out.write("         if(extraRoadAddr !== ''){\r\n");
      out.write("           extraRoadAddr = ' (' + extraRoadAddr + ')';\r\n");
      out.write("         }\r\n");
      out.write("         // 도로명, 지번 주소의 유무에 따라 해당 조합형 주소를 추가한다.\r\n");
      out.write("         if(fullRoadAddr !== ''){\r\n");
      out.write("           fullRoadAddr += extraRoadAddr;\r\n");
      out.write("         }\r\n");
      out.write("\r\n");
      out.write("         // 우편번호와 주소 정보를 해당 필드에 넣는다.\r\n");
      out.write("         document.getElementById('member_zipcode').value = data.zonecode; //5자리 새우편번호 사용\r\n");
      out.write("         document.getElementById('member_road_address').value = fullRoadAddr;\r\n");
      out.write("         document.getElementById('member_local_address').value = data.jibunAddress;\r\n");
      out.write("\r\n");
      out.write("         // 사용자가 '선택 안함'을 클릭한 경우, 예상 주소라는 표시를 해준다.\r\n");
      out.write("         if(data.autoRoadAddress) {\r\n");
      out.write("           //예상되는 도로명 주소에 조합형 주소를 추가한다.\r\n");
      out.write("           var expRoadAddr = data.autoRoadAddress + extraRoadAddr;\r\n");
      out.write("           document.getElementById('guide').innerHTML = '(예상 도로명 주소 : ' + expRoadAddr + ')';\r\n");
      out.write("\r\n");
      out.write("         } else if(data.autoJibunAddress) {\r\n");
      out.write("             var expJibunAddr = data.autoJibunAddress;\r\n");
      out.write("             document.getElementById('guide').innerHTML = '(예상 지번 주소 : ' + expJibunAddr + ')';\r\n");
      out.write("         } else {\r\n");
      out.write("             document.getElementById('guide').innerHTML = '';\r\n");
      out.write("         }\r\n");
      out.write("         \r\n");
      out.write("        \r\n");
      out.write("       }\r\n");
      out.write("     }).open();\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("//(id, ID, 아이디) 유효성검사, 중복체크\r\n");
      out.write("function fn_overlapped(){\r\n");
      out.write("    var _id=$(\"#id\").val();\r\n");
      out.write("    var $resultMsg = $('#id-check-warn'); //$resultMsg 사용하기위한 변수선언\r\n");
      out.write("    \r\n");
      out.write("    //아이디 유효성검사\r\n");
      out.write("    var idRegExp = /^[a-z0-9]{4,16}$/;\r\n");
      out.write("   /*  if(_id==''){\r\n");
      out.write("       alert(\"ID를 입력하세요\");\r\n");
      out.write("       return;\r\n");
      out.write("    } */\r\n");
      out.write("    if (_id == \"\") {\r\n");
      out.write("      //alert(\"아이디를 입력해주세요.\");\r\n");
      out.write("      $resultMsg.html(\"아이디를 입력해주세요.\");\r\n");
      out.write("      $resultMsg.css('color','red');\r\n");
      out.write("      return;\r\n");
      out.write("   }\r\n");
      out.write("   if (!idRegExp.test(_id)) {\r\n");
      out.write("      //alert(\"아이디는 4~16자리의 영문 소문자, 숫자로 구성되어야 합니다.\");\r\n");
      out.write("      $resultMsg.html('아이디는 4~16자리의 영문 소문자, 숫자로 구성되어야 합니다.');\r\n");
      out.write("      $resultMsg.css('color','red');\r\n");
      out.write("      return;\r\n");
      out.write("   }\r\n");
      out.write("   //아이디 중복체크\r\n");
      out.write("    $.ajax({\r\n");
      out.write("       type:\"post\",\r\n");
      out.write("       async:false,  \r\n");
      out.write("       url:\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/joinAndLogin/overlapped.do\",\r\n");
      out.write("       dataType:\"text\",\r\n");
      out.write("       data: {id:_id},\r\n");
      out.write("       success:function (data,textStatus){\r\n");
      out.write("          if(data=='false'){\r\n");
      out.write("              alert(\"사용할 수 있는 ID입니다.\");\r\n");
      out.write("              $('#btnOverlapped').prop(\"disabled\", true);\r\n");
      out.write("              $('#id').prop(\"disabled\", true);\r\n");
      out.write("              $('#member_id').val(_id);\r\n");
      out.write("          }else{\r\n");
      out.write("             alert(\"사용할 수 없는 ID입니다.\");\r\n");
      out.write("          }\r\n");
      out.write("       },\r\n");
      out.write("       error:function(data,textStatus){\r\n");
      out.write("          //alert(\"에러가 발생했습니다.\");ㅣ\r\n");
      out.write("       },\r\n");
      out.write("       complete:function(data,textStatus){\r\n");
      out.write("          //alert(\"작업을완료 했습니다\");\r\n");
      out.write("       }\r\n");
      out.write("    });  //end ajax    \r\n");
      out.write(" }//(아이디,id,ID)end\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" //(pwd, 비밀번호) 유효성검사\r\n");
      out.write("function validatePassword() {\r\n");
      out.write("  var passwordRegExp = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()]).{8,}$/;\r\n");
      out.write("  var password = $(\"#member_pw\").val();\r\n");
      out.write("  var $passwordWarn = $(\"#password-warn\");\r\n");
      out.write("  var $passwordConfirm = $(\"#password-confirm\");\r\n");
      out.write("  \r\n");
      out.write("  if (!password) {\r\n");
      out.write("       $passwordWarn.html('');\r\n");
      out.write("       return false;\r\n");
      out.write("     } else if (!passwordRegExp.test(password)) {\r\n");
      out.write("       $passwordWarn.html('비밀번호는 8~16자리의 영문 대/소문자, 숫자, 특수문자(!@#$%^&*())를 포함해야 합니다.');\r\n");
      out.write("       $passwordWarn.css('color', 'red');\r\n");
      out.write("       return false;\r\n");
      out.write("     } else {\r\n");
      out.write("       $passwordWarn.html('사용할 수 있는 비밀번호입니다.');\r\n");
      out.write("       $passwordWarn.css('color', 'green');\r\n");
      out.write("       $passwordConfirm.attr('disabled', false);\r\n");
      out.write("       return true;\r\n");
      out.write("     }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("//(pwd, 비밀번호) 비밀번호일치확인\r\n");
      out.write("function validatePasswordConfirm() {\r\n");
      out.write("  var password = $(\"#member_pw\").val();\r\n");
      out.write("  var confirmPassword = $(\"#password-confirm\").val();\r\n");
      out.write("  var $passwordConfirmWarn = $(\"#password-confirm-warn\");\r\n");
      out.write("\r\n");
      out.write("  if (password !== confirmPassword) {\r\n");
      out.write("    $passwordConfirmWarn.html('비밀번호와 비밀번호 확인이 일치하지 않습니다.');\r\n");
      out.write("    $passwordConfirmWarn.css('color', 'red');\r\n");
      out.write("    return false;\r\n");
      out.write("  } else {\r\n");
      out.write("    $passwordConfirmWarn.html('비밀번호와 비밀번호 확인이 일치합니다.');\r\n");
      out.write("    $passwordConfirmWarn.css('color', 'green');\r\n");
      out.write("    return true;\r\n");
      out.write("  }\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(" $(document).ready(function() {\r\n");
      out.write("     $(\"#member_pw\").on(\"blur\", function() {\r\n");
      out.write("       validatePassword();\r\n");
      out.write("     });\r\n");
      out.write("     \r\n");
      out.write("     $(\"#password-confirm\").on(\"blur\", function() {\r\n");
      out.write("       validatePasswordConfirm();\r\n");
      out.write("     });\r\n");
      out.write("   });\r\n");
      out.write("\r\n");
      out.write("/*  위 코드에서 $(\"#member_pw\").on(\"blur\", ...)는 \"member_pw\" 입력 필드가 포커스를 잃을 때\r\n");
      out.write(" (validatePassword 함수 실행) 이벤트가 발생할 때 실행됩니다.\r\n");
      out.write(" $(\"#password-confirm\").on(\"blur\", ...)는 \"password-confirm\" \r\n");
      out.write(" 입력 필드가 포커스를 잃을 때(validatePasswordConfirm 함수 실행) 이벤트가 발생할 때 실행됩니다. */\r\n");
      out.write(" \r\n");
      out.write(" //(pwd,비밀번호 password) end\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" //(name,이름) 유효성검사\r\n");
      out.write(" function validateName() {\r\n");
      out.write("  var nameRegExp = /^[a-zA-Z가-힣]{2,5}$/;\r\n");
      out.write("  var name = $(\"#member_name\").val();\r\n");
      out.write("  var $nameWarn = $(\"#name-warn\");\r\n");
      out.write("\r\n");
      out.write("  if (!name) {\r\n");
      out.write("    $nameWarn.html('이름을 입력해주세요.');\r\n");
      out.write("    $nameWarn.css('color', 'red');\r\n");
      out.write("    return false;\r\n");
      out.write("  } else if (!nameRegExp.test(name)) {\r\n");
      out.write("    $nameWarn.html('이름은 2~5자리의 한글, 영문으로 구성되어야 합니다.');\r\n");
      out.write("    $nameWarn.css('color', 'red');\r\n");
      out.write("    return false;\r\n");
      out.write("  } else {\r\n");
      out.write("    $nameWarn.html('');\r\n");
      out.write("    return true;\r\n");
      out.write("  }\r\n");
      out.write("} //(name,이름) 유효성검사 end\r\n");
      out.write(" \r\n");
      out.write(" \r\n");
      out.write(" //(rrn, RRN, 주민등록번호) 유효성검사\r\n");
      out.write("function validateRRN() {\r\n");
      out.write("   var rrn1 = document.getElementById(\"member_rrn1\").value;\r\n");
      out.write("   var rrn2 = document.getElementById(\"member_rrn2\").value;\r\n");
      out.write("\r\n");
      out.write("   // rrn1 검증\r\n");
      out.write("   if (!/^\\d{6}$/.test(rrn1)) {\r\n");
      out.write("   document.getElementById(\"rrn-warn\").innerHTML = \"주민등록번호 앞 6자리는 숫자로 구성되어야 합니다.\";\r\n");
      out.write("   document.getElementById(\"rrn-warn\").style.color =\"red\";\r\n");
      out.write("   return false;\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   // rrn2 검증\r\n");
      out.write("   if (!/^\\d{7}$/.test(rrn2)) {\r\n");
      out.write("   document.getElementById(\"rrn-warn\").innerHTML = \"주민등록번호 뒤 7자리는 숫자로 구성되어야 합니다.\";\r\n");
      out.write("   document.getElementById(\"rrn-warn\").style.color =\"red\";\r\n");
      out.write("   return false;\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   // 모두 통과하면 경고 메시지 제거\r\n");
      out.write("   document.getElementById(\"rrn-warn\").innerHTML = \"\";\r\n");
      out.write("   // true 반환\r\n");
      out.write("   return true;\r\n");
      out.write("   } //(rrn, RRN, 주민등록번호) 유효성검사 end\r\n");
      out.write("\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   //(ph,phn,전화번호,휴대폰번호)유효성검사\r\n");
      out.write("   function validatePh() {\r\n");
      out.write("       var ph1 = document.getElementsByName(\"member_ph1\")[0].value;\r\n");
      out.write("       var ph2 = document.getElementsByName(\"member_ph2\")[0].value;\r\n");
      out.write("       var ph3 = document.getElementsByName(\"member_ph3\")[0].value;\r\n");
      out.write("\r\n");
      out.write("       // ph1 검증\r\n");
      out.write("       if (!/^\\d{3}$/.test(ph1)) {\r\n");
      out.write("           document.getElementById(\"ph-warn\").innerHTML = \"휴대폰번호 앞 3자리는 숫자로 구성되어야 합니다.\";\r\n");
      out.write("           return false;\r\n");
      out.write("       }\r\n");
      out.write("\r\n");
      out.write("       // ph2 검증\r\n");
      out.write("       if (!/^\\d{4}$/.test(ph2)) {\r\n");
      out.write("           document.getElementById(\"ph-warn\").innerHTML = \"휴대폰번호 중간 4자리는 숫자로 구성되어야 합니다.\";\r\n");
      out.write("           return false;\r\n");
      out.write("       }\r\n");
      out.write("\r\n");
      out.write("       // ph3 검증\r\n");
      out.write("       if (!/^\\d{4}$/.test(ph3)) {\r\n");
      out.write("           document.getElementById(\"ph-warn\").innerHTML = \"휴대폰번호 뒤 4자리는 숫자로 구성되어야 합니다.\";\r\n");
      out.write("           return false;\r\n");
      out.write("       }\r\n");
      out.write("\r\n");
      out.write("       // 모두 통과하면 경고 메시지 제거\r\n");
      out.write("       document.getElementById(\"ph-warn\").innerHTML = \"\";\r\n");
      out.write("       // true 반환\r\n");
      out.write("       return true;\r\n");
      out.write("   }//(ph,phn,전화번호,휴대폰번호)유효성검사end\r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write("   \r\n");
      out.write(" \r\n");
      out.write(" //(이메일 e-mail) 유효성검사, 메일전송, 인증확인\r\n");
      out.write("function fn_sendauthmail() {\r\n");
      out.write("   const email = $('#member_email').val(); // 이메일 주소값 얻어오기!\r\n");
      out.write("   const $resultMsg = $('#mail-warn'); //$resultMsg 사용하기위한 변수선언\r\n");
      out.write("   \r\n");
      out.write("   // 이메일 유효성 검사\r\n");
      out.write("   const emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n");
      out.write("   if (!emailRegex.test(email)) {\r\n");
      out.write("      //alert('유효한 이메일 주소를 입력해주세요.');\r\n");
      out.write("      $resultMsg.html(\"유효한 이메일 주소를 입력해주세요.\");\r\n");
      out.write("      $resultMsg.css('color','red');\r\n");
      out.write("      return;\r\n");
      out.write("   }\r\n");
      out.write("\r\n");
      out.write("   const checkInput = $('.mail-check-input') // 인증번호 입력하는곳 \r\n");
      out.write("   \r\n");
      out.write("   $.ajax({\r\n");
      out.write("      type : 'get',\r\n");
      out.write("      url : '");
      if (_jspx_meth_c_005furl_005f0(_jspx_page_context))
        return;
      out.write("'+email, // GET방식이라 Url 뒤에 email을 뭍힐수있다.\r\n");
      out.write("      success : function (data) {\r\n");
      out.write("         console.log(\"data : \" +  data);\r\n");
      out.write("         checkInput.attr('disabled',false);\r\n");
      out.write("         code = data;\r\n");
      out.write("         alert('인증번호가 전송되었습니다.');\r\n");
      out.write("      }         \r\n");
      out.write("   }); // end ajax\r\n");
      out.write("}; // end send eamil\r\n");
      out.write("\r\n");
      out.write("// 인증번호 비교 \r\n");
      out.write("// blur -> focus가 벗어나는 경우 발생\r\n");
      out.write("function fn_checkmail() {\r\n");
      out.write("   const inputCode = $(\".mail-check-input\").val();\r\n");
      out.write("   const $resultMsg = $('#mail-check-warn'); //$resultMsg 사용하기위한 변수선언\r\n");
      out.write("   \r\n");
      out.write("   if(inputCode === code){\r\n");
      out.write("      $resultMsg.html('인증번호가 일치합니다.');\r\n");
      out.write("      $resultMsg.css('color','green');\r\n");
      out.write("      $('#mail_sendauthmail').attr('disabled',true);\r\n");
      out.write("      $('#member_email').attr('readonly',true);\r\n");
      out.write("      $('#member_email').attr('onFocus', 'this.initialSelect = this.selectedIndex');\r\n");
      out.write("         $('#member_email').attr('onChange', 'this.selectedIndex = this.initialSelect');\r\n");
      out.write("         $('#member_email_yn').val('y');\r\n");
      out.write("   }else{\r\n");
      out.write("      $resultMsg.html('인증번호가 불일치 합니다. 다시 확인해주세요!.');\r\n");
      out.write("      $resultMsg.css('color','red');\r\n");
      out.write("   }\r\n");
      out.write("};//(이메일 e-mail) end\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("   <h3 id=\"join_member\">개인 회원 가입</h3>\r\n");
      out.write("   <form action=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/joinAndLogin/addMember.do\" method=\"post\">   \r\n");
      out.write("   <div id=\"detail_table\">\r\n");
      out.write("      <table>\r\n");
      out.write("         <tbody>\r\n");
      out.write("            <tr class=\"dot_line\">\r\n");
      out.write("               <td class=\"fixed_join\">아이디</td>\r\n");
      out.write("               <td>\r\n");
      out.write("                 <input type=\"text\" name=\"id\"  id=\"id\"  size=\"20\" required minlength=\"4\" maxlength=\"16\" pattern=\"[a-z0-9]+\"/>\r\n");
      out.write("                 <input type=\"hidden\" name=\"member_id\"  id=\"member_id\" />\r\n");
      out.write("                 \r\n");
      out.write("                 <input type=\"button\"  id=\"btnOverlapped\" value=\"중복 확인\" onClick=\"fn_overlapped()\" />\r\n");
      out.write("               <br>\r\n");
      out.write("               <span id=\"id-check-warn\"></span>\r\n");
      out.write("               </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("             <tr class=\"dot_line\">\r\n");
      out.write("               <td class=\"fixed_join\">비밀번호</td>\r\n");
      out.write("               <td>\r\n");
      out.write("                 <input type=\"password\" id=\"member_pw\" name=\"member_pw\" required minlength=\"8\" maxlength=\"16\" oninput=\"validatePassword()\">\r\n");
      out.write("                 <br>\r\n");
      out.write("                 <span id=\"password-warn\"></span>\r\n");
      out.write("                 <br>\r\n");
      out.write("                 <input type=\"password\" id=\"password-confirm\" name=\"password-confirm\" placeholder=\"비밀번호 재입력\" required disabled minlength=\"8\" maxlength=\"16\" oninput=\"validatePasswordConfirm()\">\r\n");
      out.write("                 <br>\r\n");
      out.write("                 <span id=\"password-confirm-warn\"></span>\r\n");
      out.write("               </td>\r\n");
      out.write("             </tr>\r\n");
      out.write("            <tr class=\"dot_line\">\r\n");
      out.write("              <td class=\"fixed_join\">이름</td>\r\n");
      out.write("              <td>\r\n");
      out.write("                <input name=\"member_name\" id=\"member_name\" type=\"text\" size=\"20\" required  oninput=\"validateName()\">\r\n");
      out.write("                <br>\r\n");
      out.write("                <span id=\"name-warn\"></span>\r\n");
      out.write("              </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr class=\"dot_line\">\r\n");
      out.write("              <td class=\"fixed_join\">주민등록번호</td>\r\n");
      out.write("              <td>\r\n");
      out.write("                <input type=\"text\" id=\"member_rrn1\" name=\"member_rrn1\" size=\"7\" minlength=\"6\" maxlength=\"6\" required oninput=\"validateRRN()\">\r\n");
      out.write("                -\r\n");
      out.write("                <input type=\"password\" id=\"member_rrn2\" name=\"member_rrn2\" size=\"7\" minlength=\"7\" maxlength=\"7\" required oninput=\"validateRRN()\">\r\n");
      out.write("                <br>\r\n");
      out.write("                <span id=\"rrn-warn\"></span>\r\n");
      out.write("              </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr class=\"dot_line\">\r\n");
      out.write("               <td class=\"fixed_join\">휴대폰번호</td>\r\n");
      out.write("               <td> \r\n");
      out.write("                  <input size=\"10px\"  type=\"text\" name=\"member_ph1\" required minlength=\"3\" maxlength=\"3\" oninput=validatePh()  > - \r\n");
      out.write("                  <input size=\"10px\"  type=\"text\" name=\"member_ph2\" required minlength=\"4\" maxlength=\"4\" oninput=validatePh()  > - \r\n");
      out.write("                  <input size=\"10px\"  type=\"text\"name=\"member_ph3\" required minlength=\"4\" maxlength=\"4\" oninput=validatePh()  >\r\n");
      out.write("                  <br>\r\n");
      out.write("                  <span id=\"ph-warn\" style=\"color:red;\"></span>\r\n");
      out.write("               </td>            \r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr class=\"dot_line\">\r\n");
      out.write("                <td class=\"fixed_join\">이메일<br>(e-mail)</td>\r\n");
      out.write("                <td>\r\n");
      out.write("                    <input type=\"text\" size=\"20px\" name=\"member_email\" id=\"member_email\" placeholder=\"xxx@xxx.xxx 형식\" required/>\r\n");
      out.write("                    <input type=\"button\" class=\"btn-primary\" id=\"mail_sendauthmail\" value=\"이메일인증\" onClick=\"fn_sendauthmail()\" />\r\n");
      out.write("                    <br>\r\n");
      out.write("                    <span id=\"mail-warn\"></span>\r\n");
      out.write("                    <br>\r\n");
      out.write("                    <div class=\"mail-check-box\">\r\n");
      out.write("                        <input class=\"mail-check-input\" size=\"20px\" placeholder=\"인증번호 6자리 입력\" disabled maxlength=\"6\" required/>\r\n");
      out.write("                        <input type=\"hidden\" id=\"member_email_yn\" name=\"member_email_yn\" value=\"n\" />\r\n");
      out.write("                        <input type=\"button\" class=\"btn-primary\" id=\"mail_check_btn\" value=\"인증 번호 확인\" onClick=\"fn_checkmail()\"/>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <span id=\"mail-check-warn\"></span>\r\n");
      out.write("                </td>    \r\n");
      out.write("            </tr>\r\n");
      out.write("            <tr class=\"dot_line\">\r\n");
      out.write("               <td class=\"fixed_join\">주소</td>\r\n");
      out.write("               <td>\r\n");
      out.write("                  <input type=\"text\" id=\"member_zipcode\" name=\"member_zipcode\" size=\"10\" > <a href=\"javascript:execDaumPostcode()\">우편번호검색</a>\r\n");
      out.write("                 <br>\r\n");
      out.write("                 <p> \r\n");
      out.write("                  지번 주소:<br><input type=\"text\" id=\"member_road_address\"  name=\"member_road_address\" size=\"50\"><br><br>\r\n");
      out.write("                 도로명 주소: <input type=\"text\" id=\"member_local_address\" name=\"member_local_address\" size=\"50\"><br><br>\r\n");
      out.write("                 나머지 주소: <input type=\"text\"  name=\"member_rest_address\" size=\"50\" />\r\n");
      out.write("                <!--   <span id=\"guide\" style=\"color:#999\"></span> -->\r\n");
      out.write("                  </p>\r\n");
      out.write("               </td>\r\n");
      out.write("            </tr>\r\n");
      out.write("         </tbody>\r\n");
      out.write("         <tfoot>\r\n");
      out.write("            <tr class=\"dot_line\">\r\n");
      out.write("               <td colspan='2'>\r\n");
      out.write("               <input type=\"checkbox\" name=\"\" value=\"\" />&nbsp;이용약관동의(필수)<br>\r\n");
      out.write("               <input type=\"checkbox\" name=\"\" value=\"\" />&nbsp;개인정보수집 및 이용동의(필수)\r\n");
      out.write("               </td>\r\n");
      out.write("         </tr>\r\n");
      out.write("         </tfoot>\r\n");
      out.write("      </table>\r\n");
      out.write("      </div>\r\n");
      out.write("      \r\n");
      out.write("      <div class=\"clear\">\r\n");
      out.write("      <br><br>\r\n");
      out.write("      <table align=center>\r\n");
      out.write("      <tr >\r\n");
      out.write("         <td >\r\n");
      out.write("            <input type=\"submit\"  value=\"회원 가입\">\r\n");
      out.write("            <input type=\"reset\"  value=\"다시입력\">\r\n");
      out.write("         </td>\r\n");
      out.write("      </tr>\r\n");
      out.write("   </table>\r\n");
      out.write("   </div>\r\n");
      out.write("</form>   \r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fset_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:set
    org.apache.taglibs.standard.tag.rt.core.SetTag _jspx_th_c_005fset_005f0 = (org.apache.taglibs.standard.tag.rt.core.SetTag) _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.SetTag.class);
    boolean _jspx_th_c_005fset_005f0_reused = false;
    try {
      _jspx_th_c_005fset_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fset_005f0.setParent(null);
      // /WEB-INF/views/joinandlogin/joinMember.jsp(5,0) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setVar("contextPath");
      // /WEB-INF/views/joinandlogin/joinMember.jsp(5,0) name = value type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fset_005f0.setValue(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/joinandlogin/joinMember.jsp(5,0) '${pageContext.request.contextPath}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${pageContext.request.contextPath}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      int _jspx_eval_c_005fset_005f0 = _jspx_th_c_005fset_005f0.doStartTag();
      if (_jspx_th_c_005fset_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fset_0026_005fvar_005fvalue_005fnobody.reuse(_jspx_th_c_005fset_005f0);
      _jspx_th_c_005fset_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fset_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fset_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f0 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f0_reused = false;
    try {
      _jspx_th_c_005furl_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f0.setParent(null);
      // /WEB-INF/views/joinandlogin/joinMember.jsp(292,13) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f0.setValue("/mail/sendMail.do?email=");
      int _jspx_eval_c_005furl_005f0 = _jspx_th_c_005furl_005f0.doStartTag();
      if (_jspx_th_c_005furl_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
      _jspx_th_c_005furl_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f0, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f0_reused);
    }
    return false;
  }
}
